/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.qutoutiao.dataplatform.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Field extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1490080524072306647L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Field\",\"namespace\":\"net.qutoutiao.dataplatform.model\",\"fields\":[{\"name\":\"int_type\",\"type\":[\"int\",\"null\"],\"default\":null},{\"name\":\"long_type\",\"type\":[\"long\",\"null\"],\"default\":null},{\"name\":\"float_type\",\"type\":[\"float\",\"null\"],\"default\":null},{\"name\":\"string_type\",\"type\":[\"string\",\"null\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Field> ENCODER =
      new BinaryMessageEncoder<Field>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Field> DECODER =
      new BinaryMessageDecoder<Field>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Field> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Field> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Field>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Field to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Field from a ByteBuffer. */
  public static Field fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public Integer int_type;
  @Deprecated public Long long_type;
  @Deprecated public Float float_type;
  @Deprecated public CharSequence string_type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Field() {}

  /**
   * All-args constructor.
   * @param int_type The new value for int_type
   * @param long_type The new value for long_type
   * @param float_type The new value for float_type
   * @param string_type The new value for string_type
   */
  public Field(Integer int_type, Long long_type, Float float_type, CharSequence string_type) {
    this.int_type = int_type;
    this.long_type = long_type;
    this.float_type = float_type;
    this.string_type = string_type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return int_type;
    case 1: return long_type;
    case 2: return float_type;
    case 3: return string_type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: int_type = (Integer)value$; break;
    case 1: long_type = (Long)value$; break;
    case 2: float_type = (Float)value$; break;
    case 3: string_type = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'int_type' field.
   * @return The value of the 'int_type' field.
   */
  public Integer getIntType() {
    return int_type;
  }

  /**
   * Sets the value of the 'int_type' field.
   * @param value the value to set.
   */
  public void setIntType(Integer value) {
    this.int_type = value;
  }

  /**
   * Gets the value of the 'long_type' field.
   * @return The value of the 'long_type' field.
   */
  public Long getLongType() {
    return long_type;
  }

  /**
   * Sets the value of the 'long_type' field.
   * @param value the value to set.
   */
  public void setLongType(Long value) {
    this.long_type = value;
  }

  /**
   * Gets the value of the 'float_type' field.
   * @return The value of the 'float_type' field.
   */
  public Float getFloatType() {
    return float_type;
  }

  /**
   * Sets the value of the 'float_type' field.
   * @param value the value to set.
   */
  public void setFloatType(Float value) {
    this.float_type = value;
  }

  /**
   * Gets the value of the 'string_type' field.
   * @return The value of the 'string_type' field.
   */
  public CharSequence getStringType() {
    return string_type;
  }

  /**
   * Sets the value of the 'string_type' field.
   * @param value the value to set.
   */
  public void setStringType(CharSequence value) {
    this.string_type = value;
  }

  /**
   * Creates a new Field RecordBuilder.
   * @return A new Field RecordBuilder
   */
  public static net.qutoutiao.dataplatform.model.Field.Builder newBuilder() {
    return new net.qutoutiao.dataplatform.model.Field.Builder();
  }

  /**
   * Creates a new Field RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Field RecordBuilder
   */
  public static net.qutoutiao.dataplatform.model.Field.Builder newBuilder(net.qutoutiao.dataplatform.model.Field.Builder other) {
    return new net.qutoutiao.dataplatform.model.Field.Builder(other);
  }

  /**
   * Creates a new Field RecordBuilder by copying an existing Field instance.
   * @param other The existing instance to copy.
   * @return A new Field RecordBuilder
   */
  public static net.qutoutiao.dataplatform.model.Field.Builder newBuilder(net.qutoutiao.dataplatform.model.Field other) {
    return new net.qutoutiao.dataplatform.model.Field.Builder(other);
  }

  /**
   * RecordBuilder for Field instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Field>
    implements org.apache.avro.data.RecordBuilder<Field> {

    private Integer int_type;
    private Long long_type;
    private Float float_type;
    private CharSequence string_type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.qutoutiao.dataplatform.model.Field.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.int_type)) {
        this.int_type = data().deepCopy(fields()[0].schema(), other.int_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.long_type)) {
        this.long_type = data().deepCopy(fields()[1].schema(), other.long_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.float_type)) {
        this.float_type = data().deepCopy(fields()[2].schema(), other.float_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.string_type)) {
        this.string_type = data().deepCopy(fields()[3].schema(), other.string_type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Field instance
     * @param other The existing instance to copy.
     */
    private Builder(net.qutoutiao.dataplatform.model.Field other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.int_type)) {
        this.int_type = data().deepCopy(fields()[0].schema(), other.int_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.long_type)) {
        this.long_type = data().deepCopy(fields()[1].schema(), other.long_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.float_type)) {
        this.float_type = data().deepCopy(fields()[2].schema(), other.float_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.string_type)) {
        this.string_type = data().deepCopy(fields()[3].schema(), other.string_type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'int_type' field.
      * @return The value.
      */
    public Integer getIntType() {
      return int_type;
    }

    /**
      * Sets the value of the 'int_type' field.
      * @param value The value of 'int_type'.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder setIntType(Integer value) {
      validate(fields()[0], value);
      this.int_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'int_type' field has been set.
      * @return True if the 'int_type' field has been set, false otherwise.
      */
    public boolean hasIntType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'int_type' field.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder clearIntType() {
      int_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'long_type' field.
      * @return The value.
      */
    public Long getLongType() {
      return long_type;
    }

    /**
      * Sets the value of the 'long_type' field.
      * @param value The value of 'long_type'.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder setLongType(Long value) {
      validate(fields()[1], value);
      this.long_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'long_type' field has been set.
      * @return True if the 'long_type' field has been set, false otherwise.
      */
    public boolean hasLongType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'long_type' field.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder clearLongType() {
      long_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'float_type' field.
      * @return The value.
      */
    public Float getFloatType() {
      return float_type;
    }

    /**
      * Sets the value of the 'float_type' field.
      * @param value The value of 'float_type'.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder setFloatType(Float value) {
      validate(fields()[2], value);
      this.float_type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'float_type' field has been set.
      * @return True if the 'float_type' field has been set, false otherwise.
      */
    public boolean hasFloatType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'float_type' field.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder clearFloatType() {
      float_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'string_type' field.
      * @return The value.
      */
    public CharSequence getStringType() {
      return string_type;
    }

    /**
      * Sets the value of the 'string_type' field.
      * @param value The value of 'string_type'.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder setStringType(CharSequence value) {
      validate(fields()[3], value);
      this.string_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'string_type' field has been set.
      * @return True if the 'string_type' field has been set, false otherwise.
      */
    public boolean hasStringType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'string_type' field.
      * @return This builder.
      */
    public net.qutoutiao.dataplatform.model.Field.Builder clearStringType() {
      string_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Field build() {
      try {
        Field record = new Field();
        record.int_type = fieldSetFlags()[0] ? this.int_type : (Integer) defaultValue(fields()[0]);
        record.long_type = fieldSetFlags()[1] ? this.long_type : (Long) defaultValue(fields()[1]);
        record.float_type = fieldSetFlags()[2] ? this.float_type : (Float) defaultValue(fields()[2]);
        record.string_type = fieldSetFlags()[3] ? this.string_type : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Field>
    WRITER$ = (org.apache.avro.io.DatumWriter<Field>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Field>
    READER$ = (org.apache.avro.io.DatumReader<Field>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
